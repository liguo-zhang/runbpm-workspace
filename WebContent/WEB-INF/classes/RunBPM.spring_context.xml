<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop 
       	http://www.springframework.org/schema/aop/spring-aop.xsd
        ">
      
	<!-- JDBC参数配置 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" lazy-init="true">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath:/RunBPM.properties</value>
			</list>
		</property>
	</bean>

	<!-- 数据源配置 -->
	<bean id="runBPMDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<!-- 设置JDBC驱动名称 -->
		<property name="driverClass" value="${jdbc.driver}" />
		<!-- 设置JDBC连接URL -->
		<property name="jdbcUrl" value="${jdbc.url}" />
		<!-- 设置数据库用户名 -->
		<property name="user" value="${jdbc.username}" />
		<!-- 设置数据库密码 -->
		<property name="password" value="${jdbc.password}" />
		<!-- 设置连接池初始值 -->
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}" />
		<!-- 设置连接池最小空闲值 -->
		<property name="minPoolSize" value="${jdbc.minPoolSize}" />
		<!-- 设置连接池最大值 -->
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}" />

		<!--最大空闲时间,30分钟内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="1800" />
		<property name="acquireIncrement" value="2" />

		<property name="idleConnectionTestPeriod" value="60" />
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效
			保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->
		<property name="breakAfterAcquireFailure">
			<value>false</value>
		</property>
	</bean>
	
	
	<!--配置处理Oracle Blob大数据 
	<bean id="nativeJdbcExtractor"
		class="org.springframework.jdbc.support.nativejdbc.C3P0NativeJdbcExtractor" 
		lazy-init="true" />
		
	<bean id="oracleLobHandler"
		class="org.springframework.jdbc.support.lob.OracleLobHandler"
		lazy-init="true">
		<property name="nativeJdbcExtractor">
			<ref bean="nativeJdbcExtractor" />
		</property>
	</bean>
	-->
	<bean id="hibernateInterceptor" class="org.runbpm.persistence.hibernate.HibernateInterceptor">
	</bean>

	<bean id="runBPMSessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<!-- 
		<property name="lobHandler">
			<ref local="oracleLobHandler" />
		</property>
		 -->
		<!-- 配置Hibernate拦截器,自动填充数据的插入、更新时间 -->
		<property name="entityInterceptor" ref="hibernateInterceptor" />
		<property name="dataSource" ref="runBPMDataSource" />
		<property name="hibernateProperties">
			<value>
				<!-- 设置数据库方言 -->
				hibernate.dialect=${hibernate.dialect}
				
				<!-- 设置自动创建|更新|验证数据库表结构 -->
				hibernate.hbm2ddl.auto=update
				<!--  hibernate.hbm2ddl.auto=update -->
				<!--  hibernate.hbm2ddl.auto=auto -->
				<!--  hibernate.hbm2ddl.auto=create  -->
				<!-- 输出SQL语句到控制台 -->
				hibernate.show_sql=${hibernate.show_sql}
				<!-- 格式化输出到控制台的SQL语句 -->
				hibernate.format_sql=${hibernate.format_sql}
				
			</value>
		</property>

   		<property name="mappingResources">
        	<list>
        		<value>org/runbpm/persistence/hibernate/ProcessModelImpl.hbm.xml</value>
            	<value>org/runbpm/persistence/hibernate/ProcessInstanceImpl.hbm.xml</value>
            	<value>org/runbpm/persistence/hibernate/ActivityInstanceImpl.hbm.xml</value>
            	<value>org/runbpm/persistence/hibernate/TaskInstanceImpl.hbm.xml</value>
            	<value>org/runbpm/persistence/hibernate/VariableInstanceImpl.hbm.xml</value>
        		<value>org/runbpm/persistence/hibernate/ProcessModelHistoryImpl.hbm.xml</value>
            	<value>org/runbpm/persistence/hibernate/ProcessHistoryImpl.hbm.xml</value>
            	<value>org/runbpm/persistence/hibernate/ActivityHistoryImpl.hbm.xml</value>
            	<value>org/runbpm/persistence/hibernate/TaskHistoryImpl.hbm.xml</value>
            	<value>org/runbpm/persistence/hibernate/VariableHistoryImpl.hbm.xml</value>
        	</list>
  		</property>
	</bean>
	
	<!-- 
	<bean id="entityManager" class="org.runbpm.persistence.memory.MemoryEntityManagerImpl">
	</bean>
	-->
	 
	<bean id="entityManager" class="org.runbpm.persistence.hibernate.HibernateEntityManagerImpl">
	</bean>
	  
	<bean id="runBPMService" class="org.runbpm.service.RunBPMServiceImpl">
		<property name="entityManager" ref="entityManager" />
	</bean>
	
	<bean id="globalResourceHandler" class="org.runbpm.handler.resource.GlobalResourceHandlerSample">
	</bean>
	
	<!-- 针对对runBPMService的截获器，主要为设置service接口的每一次线程调用初始化Hibernate session，设置到rumBPMThreadContext中
		RunBPM内部如果配置为使用Hibernate，将使用rumBPMThreadContext中的Hibernate session-->
    <bean id="serviceInterceptor" class="org.runbpm.persistence.hibernate5.Hibernate5Interceptor">
    		<property name="recordTime" value="false" />
    		<property name="sessionFactory" ref="runBPMSessionFactory" />
    </bean>

	<!-- 截获器配置 -->
    <aop:config>
        <aop:aspect ref="serviceInterceptor">
            <aop:pointcut id="theExecutionOfServiceMethod"
                        expression="execution(* org.runbpm.service.RunBPMServiceImpl.*(..))；"/>
            <aop:around pointcut-ref="theExecutionOfServiceMethod" method="interceptor"/>
        </aop:aspect>
    </aop:config>
	
</beans>